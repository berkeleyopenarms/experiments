import numpy as np #will use to create arrays
import pickle #will use to save data between program launches
import sys
sys.path.append('../../blue_interface')
from blue_interface import BlueInterface #this is the API for the robot
import random
import os

kk = BlueInterface("left","hekate.cs.berkeley.edu") #creates object of class KokoInterface at the IP in quotes with the name 'kk'
kk.disable_control() #this turns off any other control currently on the robot (leaves it in gravtiy comp mode)

if not os.path.isfile('benchmark_positions_list.p'):
	print("You should first run 'record_positions.py")
	#TODO make this an actual error

position_list = pickle.load( open("benchmark_positions_list.p", "rb")) #uses the pickle function to read the binary file created in record_poses.py

comp_pt = [] #initialize a data point list - this will hold the commanded and measured pose at each command
collected_data = [] #initialize a list that will hold all the comp_pt lists and can be saved to an external file at the end

num_cycles = input("Please enter the number of cycles you would like to test: ")

for i in range(num_cycles): #iterate over the number of cycles
	random.shuffle(position_list) #randomly shuffles the order of the list so that it goes to the psoes in a different random order each time
	for j in range(len(position_list)): #iterate over the shuffled pose list
		commanded_position = position_list[j] #save the commanded pose to a variable
		kk.set_joint_positions(commanded_position) #tell the robot to go to the command pose
		measured_pose = {'t':'s'} #measure the puse using the vive system
		comp_pt = [commanded_position, measured_position] #collect the command pose and measured pose into a list
		collected_data.append(comp_pt) #put the list into the list of all data


if num_cycles == 0:
	print('No data collected: requested number of cycles was 0')
else:
	pickle.dump(collected_data, open("benchmark_collected_data.p", "wb")) #uses the pickle function to write a binary file
	print('Your data has been saved in the directory')